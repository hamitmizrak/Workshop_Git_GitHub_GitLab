# docker-compose --version
# docker-compose -v
# docker-compose up
# docker-compose up -d
# docker-compose -f Custom_Docker_compose.yml up
# docker-compose -f Custom_Docker_compose.yml up -d
# docker-compose down
# docker-compose restart
# docker-compose ps

# restart: on-failure
# restart: no => default olandır. Yani docker compose otomatik olarak restart yapsın
# restart: unless-stopped => Konteynar durduğunda otomatik olarak yeniden başlasın
# restart: always => Konteynar her zaman otomatik başlasın
# restart: on-failure => konteryanar çökmesi halinde otomatik başlasın


# JAVA PROPERTIES.YML
# spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# spring.datasource.url=jdbc:postgresql://localhost:5432/blog
# spring.datasource.username=postgres
# spring.datasource.password=postgres
# spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect

########################################################################################################################
########################################################################################################################

# Services
services:
  # Backend
  backend:
    container_name: blog_react
    image: blog_react
    restart: always
    #build: .
    #build: ./dizinAdi
    build:
      context: .
      dockerfile: Postgres_Dockerfile
    ports:
      - "4444:4444"
    volumes:
      - postgres_volume_data:/var/lib/postgresql/data
      #- ./src/main/resources/pom.xml:/src/main/resources/pom.xml
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_depends_on:5432/blog
      SPRING_DATASOURCE_USERNAME: "postgres"
      SPRING_DATASOURCE_PASSWORD: "postgres"
      SPRING_JPA_HIBERNATE_DDL_AUTO: create
    networks:
      - springreactpostres
    depends_on:
      - postgres_depends_on

  # Postgresql
  postgres_depends_on:
    image: postgres
    container_name: postgres_spring
    ports:
      - 5433:5432
    expose:
      - "5432"
    networks:
      - springreactpostres
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=blog
    restart: unless-stopped

# Networks
networks:
  springreactpostres:
    name: springreactpostres
    driver: bridge

# Volumes
volumes:
  postgres_volume_data:
    driver: local

########################################################################################################################
########################################################################################################################
# docker ps
# winpty docker container  exec -it  blog_react bash

# docker-compose down
# docker volume ls
# docker volume inspect mysql_volume_data

# docker-compose down
# docker volume rm mysql_volume_data

# winpty docker run -it --rm \
# -v docker_apache_tomcat-conf://usr/local/tomcat/conf  \
# -v docker_apache_tomcat-logs://usr/local/tomcat/logs \
# -v docker_apache_tomcat-webapps://usr/local/tomcat/webapps \
# blog_react bash

# ls -al
# cd usr/local/tomcat/logs
# ls -al
# cd usr/local/tomcat/webapps
# Bu komut şunları yapar:

# docker run: Yeni bir container çalıştırır.
# -it: İnteraktif terminal modunda çalıştırır.
# --rm: Container kapatıldığında otomatik olarak siler.
# -v tomcat-logs:/data: tomcat-logs volume'unu container içindeki /data dizinine bağlar.
# ubuntu: Ubuntu tabanlı bir container çalıştırır.
# bash: Container içinde bash shell çalıştırır.


# deploy kısmında, Swarm dağıtımı için ayarları yapıyoruz.
# 3 kopya (replicas: 3) oluşturulacak, güncelleme yapılandırması
# ve yeniden başlatma politikası belirlenmiştir.
